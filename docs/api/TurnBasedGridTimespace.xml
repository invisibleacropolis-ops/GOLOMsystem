<?xml version="1.0" encoding="UTF-8" ?>
<class name="TurnBasedGridTimespace" inherits="Node" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
	<brief_description>
		Orchestrates initiative order, action points, and status effects for actors placed on a `LogicGridMap`.  A simple state machine coordinates the tactical round flow so UI or AI systems can subscribe via signals without tightly coupling to the internals.
	</brief_description>
	<description>
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="_init">
			<return type="void" />
			<description>
			</description>
		</method>
		<method name="log_event">
			<return type="void" />
			<param index="0" name="t" type="String" />
			<param index="1" name="actor" type="Object" default="null" />
			<param index="2" name="pos" type="Variant" default="null" />
			<param index="3" name="data" type="Variant" default="null" />
			<description>
				Record an event in a structured format for later replay or debugging.
			</description>
		</method>
		<method name="set_grid_map">
			<return type="void" />
			<param index="0" name="map" type="Resource" />
			<description>
				Provide the grid map used for actor placement and movement.
			</description>
		</method>
		<method name="add_actor">
			<return type="void" />
			<param index="0" name="actor" type="Object" />
			<param index="1" name="initiative" type="int" />
			<param index="2" name="action_points" type="int" />
			<param index="3" name="pos" type="Vector2i" default="Vector2i(0, 0)" />
			<param index="4" name="tie_break" type="int" default="-1" />
			<description>
				Add an actor with initiative, action points, and optional starting position. @param initiative Higher values act first. @param tie_break Optional deterministic tie breaker.
			</description>
		</method>
		<method name="_sort_initiative">
			<return type="void" />
			<description>
			</description>
		</method>
		<method name="add_object">
			<return type="void" />
			<param index="0" name="obj" type="Object" />
			<param index="1" name="pos" type="Vector2i" default="Vector2i(0, 0)" />
			<description>
				Register a static object that participates in the timeline.
			</description>
		</method>
		<method name="remove_actor">
			<return type="void" />
			<param index="0" name="actor" type="Object" />
			<description>
				Remove an actor from the timeline and grid.
			</description>
		</method>
		<method name="get_objects">
			<return type="Array" />
			<description>
				Expose tracked objects for inspection in tests.
			</description>
		</method>
		<method name="check_battle_end">
			<return type="void" />
			<description>
				Determine if any faction has been eliminated and end the battle early.
			</description>
		</method>
		<method name="_set_state">
			<return type="void" />
			<param index="0" name="s" type="int" enum="TurnBasedGridTimespace.State" />
			<description>
			</description>
		</method>
		<method name="start_round">
			<return type="void" />
			<description>
				Reset action points and begin a new round.
			</description>
		</method>
		<method name="_begin_actor_turn">
			<return type="void" />
			<description>
			</description>
		</method>
		<method name="get_current_actor">
			<return type="Object" />
			<description>
				Returns the actor whose turn is currently active.
			</description>
		</method>
		<method name="end_turn">
			<return type="void" />
			<description>
				Advance to the next actor in the initiative order.
			</description>
		</method>
		<method name="register_action">
			<return type="void" />
			<param index="0" name="id" type="String" />
			<param index="1" name="cost" type="int" />
			<param index="2" name="tags" type="Array" default="[]" />
			<param index="3" name="validator" type="Callable" default="Callable()" />
			<param index="4" name="executor" type="Callable" default="Callable()" />
			<description>
				Register an action definition.
			</description>
		</method>
		<method name="can_perform">
			<return type="bool" />
			<param index="0" name="actor" type="Object" />
			<param index="1" name="action_id" type="String" />
			<param index="2" name="payload" type="Variant" default="null" />
			<description>
			</description>
		</method>
		<method name="perform">
			<return type="bool" />
			<param index="0" name="actor" type="Object" />
			<param index="1" name="action_id" type="String" />
			<param index="2" name="payload" type="Variant" default="null" />
			<description>
			</description>
		</method>
		<method name="_spend_ap">
			<return type="void" />
			<param index="0" name="actor" type="Object" />
			<param index="1" name="amount" type="int" />
			<param index="2" name="reason" type="String" />
			<description>
			</description>
		</method>
		<method name="_get_actor_index">
			<return type="int" />
			<param index="0" name="actor" type="Object" />
			<description>
			</description>
		</method>
		<method name="get_action_points">
			<return type="int" />
			<param index="0" name="actor" type="Object" />
			<description>
				Remaining action points for a given actor.
			</description>
		</method>
		<method name="move_current_actor">
			<return type="bool" />
			<param index="0" name="to" type="Vector2i" />
			<description>
				Convenience to move the current actor using the registered move action.
			</description>
		</method>
		<method name="register_reaction_watcher">
			<return type="void" />
			<param index="0" name="cb" type="Callable" />
			<description>
				Allow external systems to observe reaction windows.
			</description>
		</method>
		<method name="_open_reaction_window">
			<return type="void" />
			<param index="0" name="actor" type="Object" />
			<param index="1" name="action_id" type="String" />
			<param index="2" name="payload" type="Variant" />
			<description>
			</description>
		</method>
		<method name="apply_damage">
			<return type="void" />
			<param index="0" name="attacker" type="Object" />
			<param index="1" name="defender" type="Object" />
			<param index="2" name="amount" type="int" />
			<description>
			</description>
		</method>
		<method name="add_overwatcher">
			<return type="void" />
			<param index="0" name="actor" type="Object" />
			<param index="1" name="once_per_turn" type="bool" default="true" />
			<description>
				Register an actor to react when others move into line of sight.
			</description>
		</method>
		<method name="_check_overwatch">
			<return type="void" />
			<param index="0" name="moved_actor" type="Object" />
			<description>
			</description>
		</method>
		<method name="apply_status_to_actor">
			<return type="void" />
			<param index="0" name="actor" type="Object" />
			<param index="1" name="status" type="String" />
			<param index="2" name="duration" type="int" default="0" />
			<param index="3" name="timing" type="String" default="&quot;turn_start&quot;" />
			<description>
				Apply a status effect to an actor.
			</description>
		</method>
		<method name="get_statuses_for_actor">
			<return type="Array" />
			<param index="0" name="actor" type="Object" />
			<description>
			</description>
		</method>
		<method name="apply_status_to_tile">
			<return type="void" />
			<param index="0" name="tile" type="Vector2i" />
			<param index="1" name="status" type="String" />
			<description>
				Apply a status effect to a tile.
			</description>
		</method>
		<method name="get_statuses_for_tile">
			<return type="Array" />
			<param index="0" name="tile" type="Vector2i" />
			<description>
			</description>
		</method>
		<method name="remove_status_from_actor">
			<return type="void" />
			<param index="0" name="actor" type="Object" />
			<param index="1" name="status" type="String" />
			<description>
				Remove a status effect from an actor or tile.
			</description>
		</method>
		<method name="remove_status_from_tile">
			<return type="void" />
			<param index="0" name="tile" type="Vector2i" />
			<param index="1" name="status" type="String" />
			<description>
			</description>
		</method>
		<method name="_tick_statuses">
			<return type="void" />
			<param index="0" name="timing" type="String" />
			<param index="1" name="actor" type="Object" default="null" />
			<description>
			</description>
		</method>
		<method name="to_dict">
			<return type="Dictionary" />
			<description>
			</description>
		</method>
		<method name="from_dict">
			<return type="void" />
			<param index="0" name="data" type="Dictionary" />
			<description>
			</description>
		</method>
		<method name="create_snapshot">
			<return type="Dictionary" />
			<description>
			</description>
		</method>
		<method name="serialize_event_log">
			<return type="String" />
			<description>
			</description>
		</method>
		<method name="replay_event_log">
			<return type="void" />
			<param index="0" name="json" type="String" />
			<param index="1" name="handler" type="Callable" />
			<description>
			</description>
		</method>
		<method name="run_tests">
			<return type="Dictionary" />
			<description>
				Simple self-test to integrate with workspace.
			</description>
		</method>
	</methods>
	<members>
		<member name="state" type="int" setter="" getter="" enum="TurnBasedGridTimespace.State" default="0">
		</member>
		<member name="grid_map" type="Resource" setter="" getter="">
		</member>
		<member name="_actors" type="Array" setter="" getter="" default="[]">
		</member>
		<member name="_objects" type="Array" setter="" getter="" default="[]">
		</member>
		<member name="_actor_status" type="Dictionary" setter="" getter="" default="{}">
		</member>
		<member name="_tile_status" type="Dictionary" setter="" getter="" default="{}">
		</member>
		<member name="_current_index" type="int" setter="" getter="" default="0">
		</member>
		<member name="event_log" type="Array" setter="" getter="" default="[]">
		</member>
		<member name="_actions" type="Dictionary" setter="" getter="" default="{}">
		</member>
		<member name="_rng" type="RandomNumberGenerator" setter="" getter="" default="new()">
		</member>
		<member name="_next_id" type="int" setter="" getter="" default="0">
		</member>
		<member name="_overwatchers" type="Dictionary" setter="" getter="" default="{}">
		</member>
		<member name="_turn_id" type="int" setter="" getter="" default="0">
		</member>
		<member name="reaction_watchers" type="Callable[]" setter="" getter="" default="[]">
		</member>
	</members>
	<signals>
		<signal name="round_started">
			<description>
				Emitted when a new round begins.
			</description>
		</signal>
		<signal name="round_ended">
			<description>
				Emitted when a round ends.
			</description>
		</signal>
		<signal name="battle_over">
			<param index="0" name="faction" type="Variant" />
			<description>
				All actors on a faction are defeated.
			</description>
		</signal>
		<signal name="turn_started">
			<param index="0" name="actor" type="Variant" />
			<description>
				Fired at the start of an actor's turn. @param actor The acting object
			</description>
		</signal>
		<signal name="turn_ended">
			<param index="0" name="actor" type="Variant" />
			<description>
				Fired after an actor finishes its turn. @param actor The acting object
			</description>
		</signal>
		<signal name="ap_changed">
			<param index="0" name="actor" type="Variant" />
			<param index="1" name="old" type="Variant" />
			<param index="2" name="new" type="Variant" />
			<description>
				Action points for an actor changed. @param actor The affected actor @param old Previous AP value @param new Current AP value
			</description>
		</signal>
		<signal name="action_performed">
			<param index="0" name="actor" type="Variant" />
			<param index="1" name="action_id" type="Variant" />
			<param index="2" name="payload" type="Variant" />
			<description>
				An action successfully executed.
			</description>
		</signal>
		<signal name="status_applied">
			<param index="0" name="target" type="Variant" />
			<param index="1" name="status" type="Variant" />
			<description>
				Status effects applied/removed for both actors and tiles.
			</description>
		</signal>
		<signal name="status_removed">
			<param index="0" name="target" type="Variant" />
			<param index="1" name="status" type="Variant" />
			<description>
			</description>
		</signal>
		<signal name="damage_applied">
			<param index="0" name="attacker" type="Variant" />
			<param index="1" name="defender" type="Variant" />
			<param index="2" name="amount" type="Variant" />
			<description>
				Damage dealt between actors. @param attacker Source of the damage @param defender Recipient of the damage @param amount HP removed
			</description>
		</signal>
		<signal name="reaction_triggered">
			<param index="0" name="actor" type="Variant" />
			<param index="1" name="data" type="Variant" />
			<description>
				Placeholder signals for future extensions.
			</description>
		</signal>
		<signal name="timespace_snapshot_created">
			<param index="0" name="snapshot" type="Variant" />
			<description>
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="GRID_MAP_RES" value="&lt;Object&gt;">
		</constant>
		<constant name="Logging" value="&lt;Object&gt;">
		</constant>
		<constant name="IDLE" value="0" enum="State">
		</constant>
		<constant name="ROUND_START" value="1" enum="State">
		</constant>
		<constant name="ACTOR_START" value="2" enum="State">
		</constant>
		<constant name="ACTING" value="3" enum="State">
		</constant>
		<constant name="REACTION_WINDOWS" value="4" enum="State">
		</constant>
		<constant name="ACTOR_END" value="5" enum="State">
		</constant>
		<constant name="NEXT_ACTOR" value="6" enum="State">
		</constant>
		<constant name="ROUND_END" value="7" enum="State">
		</constant>
	</constants>
</class>
